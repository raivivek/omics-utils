#! /usr/bin/env python
#
# Vivek Rai
# vivekrai@umich.edu
# (c) Parker Lab
#
# Sep 5, 2018
# Last Updated: October 4, 2018
#

import os
import subprocess


def run(command):
    subprocess.run(command, shell=True)


def count_overlap(args):
    """ Count the number of fragments overlapping given BED file using
    `featureCounts` from the `subread` package.

    featureCounts produces output with pathnames and .bam file extension
    removed from the headers.
    
    Depends on `bed2saf`, `featureCounts` and `sponge`. """

    args["bams"] = " ".join(args["bams"])
    args["p"] = "-p" if args["p"] else ""

    prefix = os.path.dirname(args["bams"][0])
    bed_prefix = os.path.basename(args["bed"])

    CMD = """
        featureCounts           \
            -a {bp}.saf         \
            -o {output}         \
            -F 'SAF'            \
            -T {threads}        \
            --largestOverlap    \
            -D 1000             \
            {p}                 \
            {bams}
    """.format(
        **args, bp=bed_prefix
    )

    # generate a temporary SAF file
    print("(countOverlap) INFO: Preparing SAF file..")
    run("cat {} | bed2saf > {bp}.saf".format(args["bed"], bp=bed_prefix))

    # run featureCounts
    print("(countOverlap) INFO: Running featureCounts..")
    print(CMD)
    run(CMD)

    PROCESS = """
        tail -n +2 {output}      \
        | cut -f1,5 --complement \
        | sed s~{prefix}/~~g     \
        | sed s~.bam~~g          \
        | sponge {output}
    """.format(
        **args, prefix=prefix
    )

    # process featureCounts output file
    print("(countOverlap) INFO: Processing featureCounts output..")
    run(PROCESS)


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser()

    parser.add_argument("--bed", required=True, help="BED File")
    parser.add_argument("--bams", required=True, nargs="+", help="List of input BAM(s)")
    parser.add_argument("--threads", default=2, help="Number of threads (default: 2)")
    parser.add_argument(
        "--output",
        required=True,
        help="Output file PREFIX (default: prefix of input BED)",
    )
    parser.add_argument(
        "-p", action="store_true", default=False, help="Paired-end; Count fragments"
    )

    args = parser.parse_args()
    count_overlap(vars(args))
